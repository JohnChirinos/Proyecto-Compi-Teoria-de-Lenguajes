%token IF THEN ELSE END REPEAT UNTIL READ WRITE PUNTO_Y_COMA DOS_PUNTOS MENOR MAYOR IGUAL MENOR_MAYOR MENOR_O_IGUAL MAYOR_O_IGUAL MAS MENOS MULTIPLI DIVISION PARENT_IZQ PARENT_DER IDENTIFICADOR NUMERO	


%{
   #include <stdio.h>
   #include <stdlib.h>
   #include <string.h>
      
   
   int memoria_ram[26] = { 0 };
   extern unsigned int columna;
   extern unsigned int linea;
   extern int yylex();      
   extern FILE *yyin;
   int yyerror(const char *s);
   
   /* #pragma warning(disable: 4996 4065 6385 6262) */
%}

%output "sintactico.cpp"

%union
{
    int valor_entero;
    char caracter_de_la_variable[3];
    unsigned int localizacion_de_la_variable;
    char cadena_de_caracteres[200];
}

%type<valor_entero> expresion VARIABLE

%%

programa:
     secuencia_intrucciones;

secuencia_instrucciones:
     	secuencia_instrucciones PUNTO_Y_COMA instruccion	{
     							
     							 	}
     |	instruccion	{
     
     			}
   ;


instruccion:
	     instruccion_if	{ 
			
		    		}

	   | instruccion_repeat { 
				
		      		}

	   | instruccion_asignacion { 
					
				    }

	   | instruccion_read	{ 
					
				}

	   | instruccion_write	{ 
					
				}
	   | error	{

			}
   ;
   
   
instruccion_if:
	     IF expresion THEN secuencia_instrucciones END	{
	     
	     							}
	     							
	   | IF expresion THEN secuencia_instrucciones ELSE	{
	   
	   							}
	   							
	   | secuencia_instrucciones END	{

						}
   ;
	
	
instruccion_repeat:
	     REPEAT secuencia_instrucciones UNTIL expresion	{
								
								}
   ;
   
   
instruccion_asignacion:
             IDENTIFICADOR DOS_PUNTOS IGUAL expresion	{
             							$$ = $4
             						}
   ;
   
   
instruccion_read:
	     READ IDENTIFICADOR	{
	     
	     			}
   ;
    
    
instrucciones_write:
	     WRITE expresion	{
	     
	     			}
   ;
    
    
expresion:
	     expresion_simple '<' expresion_simple	{
	     							$$ = $1 < $3
	     						}
	     					
	   | expresion_simple '>' expresion_simple	{
	     							$$ = $1 > $3
	     						}
	     						
	   | expresion_simple '=' expresion_simple	{
	     							$$ = $3
	     						}
	     						
	   | expresion_simple '<>' expresion_simple	{
	     							/* No estoy seguro que va a en este */
	     						}  
	     						
	   | expresion_simple '<=' expresion_simple	{
	   	     						$$ = $1 <= $3
	     						}
	     						
	   | expresion_simple '>=' expresion_simple	{
	   	     						$$ = $1 >= $3
	     						}
	     						
	   | expresion_simple	{
	   
	   			}
   ;	   			
	
	
expresion_simple:
	     expresion_simple MAS termino	{
							$$ = $1 + $3
						}
						
	   | expresion_simple MENOS termino	{
	   						$$ = $1 - $3
	   					}
	   					
	   | termino
	   
   ;
   
   
termino:
	     termino MULTIPLI factor	{
	     					$$ = $1 * $3
	     				}
	    
	   | termino DIVISION factor	{
	   					$$ = $1 / $3
	   				}
	   			
	   | factor	{
	   
	   		}
   ;
   
   
factor:
	     PARENT_IZQ expresion PARENT_DER	{
	      						$$ = $2
	      					}
	     
	   | NUMERO	{
	   			$$ = $1
	   		}
	   		
	   | IDENTIFICADOR	{
	   			
	   			}
	   			
	   | error	{
	   
	   		}
   ;


%%

int yyerror(const char *s) 
{

   char mensaje[100];

   if ( !strcmp( s, "parse error" ) )
      strcpy( mensaje, "Error de sintaxis" );
   else
      strcpy( mensaje, s );

   //printf("Error en linea %d: %s\n", linea, mensaje);
   exit( 1 ); /* Sale del programa */

   return 0;
}

int main(int argc, char * argv[])
{

   ++argv;
   --argc;  
   if (argc > 0)
        yyin = fopen( argv[0], "r" );
   else
        yyin = stdin;
     
    
   #ifdef YYDEBUG
    	yydebug = 1;
   #endif
   yyparse();
   return 0;
}
